import { Alert, AlertTitle } from "@mui/material";
import axios from "axios";
import React from "react";
import { useDispatch, useSelector } from "react-redux";
import { AlertDescription } from "../ui/alert";

const downloadHTML = (htmlString: string) => {
  // Create a Blob from the HTML string
  const blob = new Blob([htmlString], { type: "text/html" });

  // Create a URL from the Blob
  const url = URL.createObjectURL(blob);

  // Create a link element
  const link = document.createElement("a");

  // Set the href of the link to the URL
  link.href = url;

  // Set the download attribute of the link to the desired file name
  link.download = "download.html";

  // Append the link to the body
  document.body.appendChild(link);

  // Programmatically click the link
  link.click();

  // Remove the link from the body
  document.body.removeChild(link);
};
export default function Main() {
  const [url, setUrl] = React.useState<string>("");
  const dispatch = useDispatch();
  const hanldeSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    await axios("http://localhost:4000/api/scan", {
      withCredentials: true,
      method: "POST",
      data: { url },
    })
      .then((res) => {
        const { url, status, userId, nmap, zap, _id } = res.data;
        console.log(res.data);
        dispatch({
          type: "ADD_TEST_STATE",
          payload: { url, status, userId, nmap, zap, _id },
        });
      })
      .catch((err) => {
        console.log(err);
      });
  };
  const handleClick = async (id: string) => {
    await axios("http://localhost:4000/api/getscan", {
      method: "post",
      withCredentials: true,
      data: { scanId: id },
    })
      .then((res) => {
        dispatch({
          type: "UPDATE_TEST_STATE",
          payload: { _id: id, updatedState: res.data },
        });
        setStatusData({ msg: res.data.message, status: res.status });
        hanldeOpen();
        // download the res.data.result
        downloadHTML(res.data.result);
      })
      .catch((err: any) => {
        setStatusData({
          msg: err.response.data.message,
          status: err.response.status,
        });
        hanldeOpen();
      });
  };

  //   url: "",
  //   status: "pending",
  //   userId: "",
  //   nmap: false,
  //   zap: false,
  //   _id: "",
  const [open, setOpen] = React.useState(false);
  const [statusData, setStatusData] = React.useState({ msg: "", status: 0 });
  const hanldeOpen = () => {
    setOpen(true);
    setTimeout(() => {
      setOpen(false);
    }, 3000);
  };

  return (
    <>
      {open && <StatusAlert msg={statusData.msg} status={statusData.status} />}
      <div className="flex items-start justify-center mt-[50px] max-h-max w-[85%] rounded-md">
        <form
          onSubmit={hanldeSubmit}
          className="w-full flex  items-center p-10  "
        >
          <input
            type="text"
            placeholder="Enter URL"
            className="w-full h-[60px] rounded-sm rounded-r-none p-4 text-xl border-[.2px] outline-none border-gray-200"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
          />
          <button className="min-w-max h-[60px] bg-[#9a6bda] rounded-r-sm text-xl text-white font-semibold px-4">
            Catch bugs
          </button>
        </form>
      </div>
      <table className="w-[80%] border border-gray-200 divide-y divide-gray-200 rounded-md">
        <thead className="bg-gray-50 rounded-md">
          <tr>
            <th className="px-6 py-3 text-center text-sm font-medium text-gray-500 uppercase tracking-wider">
              URL
            </th>
            <th className="text-center px-6 py-3 text-sm font-medium text-gray-500 uppercase tracking-wider">
              Request Status
            </th>
            <th className="text-center px-6 py-3 text-sm font-medium text-gray-500 uppercase tracking-wider">
              Nmap Status
            </th>
            <th className="text-center px-6 py-3 text-sm font-medium text-gray-500 uppercase tracking-wider">
              Zap Status
            </th>
            <th className="text-center px-6 py-3  text-sm font-medium text-gray-500 uppercase tracking-wider">
              Result
            </th>
          </tr>
        </thead>
        <TableRow handleClick={handleClick} />
      </table>
    </>
  );
}

function TableRow({
  handleClick,
}: {
  handleClick: Function;
}): React.JSX.Element {
  const dispatch = useDispatch();
  const arr = useSelector((state: any) => state.testDetails);

  return (
    <>
      <tbody className="bg-white divide-y divide-gray-200">
        {arr.length > 0 ? (
          arr.map((item: any) => {
            return (
              <>
                <tr className="hover:bg-[#a19e9e11]">
                  <td className="px-6 py-4 whitespace-nowrap text-center">
                    <div className="text-md text-gray-900">{item.url}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-center">
                  {item.status === "pending" ? (
                      <span className="px-2 inline-flex text-md leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                        Pending
                      </span>
                    )
                    : (
                      <span className="px-2 inline-flex text-md leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        Completed
                      </span>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-center">
                    {!item.nmap ? (
                      <span className="px-2 inline-flex text-md leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                        Pending
                      </span>
                    )
                    : (
                      <span className="px-2 inline-flex text-md leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        Completed
                      </span>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-center">
                    {!item.zap ? (
                      <span className="px-2 inline-flex text-md leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                        Pending
                      </span>
                    ) : (
                      <span className="px-2 inline-flex text-md leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        Completed
                      </span>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-center text-md font-medium">
                    <button
                      className="text-indigo-600 hover:text-indigo-900 focus:outline-none"
                      onClick={() => handleClick(item._id)}
                    >
                      View Result
                    </button>
                  </td>
                </tr>
              </>
            );
          })
        ) : (
          <tr>
            <td colSpan={5} className="text-center p-4">
              No data available
            </td>
          </tr>
        )}
      </tbody>
    </>
  );
}

function StatusAlert({
  msg,
  status,
}: {
  msg: string;
  status: number;
}): React.JSX.Element {
  return (
    <Alert
      variant="standard"
      severity={status !== 201 ? "info" : "success"}
      className="absolute w-[250px] right-0 m-4 transition-all animation-custom-fade-in"
    >
      <AlertTitle>{status !== 201 ? "Status" : "Success !"}</AlertTitle>
      <AlertDescription>{msg}</AlertDescription>
    </Alert>
  );
}
