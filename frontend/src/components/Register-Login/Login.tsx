import { customThemeTextField } from "@/theme/TextField";
import { TextField, ThemeProvider, useTheme } from "@mui/material";
import { Visibility, VisibilityOff } from "@mui/icons-material";
import { Box, IconButton, InputAdornment } from "@mui/material";
import React, { use } from "react";
import Link from "next/link";
import { Resolver, SubmitHandler, useForm } from "react-hook-form";
import axios from "axios";
import { useRouter } from "next/navigation";
import { Alert, AlertDescription, AlertTitle } from "../ui/alert";
import { useDispatch } from "react-redux";

type LoginForm = {
  email: string;
  password: string;
};

function validateLoginForm(value: LoginForm) {
  const errors: any = { email: { message: "" }, password: { message: "" } };
  if (!value.email) {
    errors.email.message = "Email is required";
  }
  if (!value.password) {
    errors.password.message = "Password is required";
  }
  return errors;
}
const resolver: Resolver<LoginForm> = (formValue) => {
  return {
    values: formValue.email && formValue.password ? formValue : {},
    errors: validateLoginForm(formValue),
  };
};
const Login: React.FC = () => {
  const outerTheme = useTheme();
  const dispatch = useDispatch();
  // alert component
  const [open, setOpen] = React.useState(false);
  const hanldeOpen = () => {
    setOpen(true);
    setTimeout(() => {
      setOpen(false);
    }, 3000);
  };

  const router = useRouter();
  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
    setValue,
  } = useForm<LoginForm>();

  async function loginFn(credentials: LoginForm): Promise<any> {
    try {
      const response = await axios.post(
        "http://localhost:4000/api/login",
        credentials,
        {
          withCredentials: true, // Enable sending cookies with the request
        }
      );
      const data = {name: response.data.uname, email: response.data.email, id: response.data.id};
      dispatch({ type: "SET_USER_DETAILS", payload: data });
      router.push("/");
    } catch (error: any) {
      console.error(error?.response?.status);
      hanldeOpen();
    }
  }

  const [showPassword, setShowPassword] = React.useState(false);

  const handleClickShowPassword = () => {
    setShowPassword(!showPassword);
  };
  return (
    <div
      className="w-screen h-screen xl:grid grid-cols-5 bg-[#f0f0f0] overflow-hidden"
      style={{ backgroundImage: "url('assets/images/loginbg-1.png')" }}
    >
      {open && <LoginAlert />}
      <div className="col-span-2 flex flex-col justify-center items-center lg:px-0 px-4 h-screen bg-[#f0f0f0]">
        <h1 className="text-4xl font-semibold mb-4 italic underline">
          Sign in
        </h1>
        <ThemeProvider theme={customThemeTextField(outerTheme)}>
          <Box
            className="flex flex-col w-[85%] p-10 gap-2"
            component="form"
            onSubmit={handleSubmit(loginFn)}
            noValidate
            autoComplete="off"
          >
            <TextField
              {...register("email", { required: "Email is required" })}
              type="email"
              label="Email"
              variant="outlined"
              helperText={errors.email?.message}
              error={!!errors.email}
            />
            <TextField
              {...register("password", { required: "Password is required" })}
              type={showPassword ? "text" : "password"}
              label="Password"
              helperText={errors.password?.message}
              error={!!errors.password}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton onClick={handleClickShowPassword} edge="end">
                      {showPassword ? <Visibility /> : <VisibilityOff />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
            <button
              type="submit"
              className="h-[45px] bg-[#ccc] text-[#000] mt-3 p-3 font-semibold hover:scale-[1.01] transition-all duration-300 ease-in-out outline-none focus:border-[.1px] focus:border-[#ccc]"
            >
              Find your Buggy
            </button>
            <div className="flex justify-between items-center text-sm mt-1">
              <p>Create an account</p>
              <Link
                href="/register"
                className="text-[#843dde] underline italic"
              >
                <p>Sign up</p>
              </Link>
            </div>
          </Box>
        </ThemeProvider>
      </div>
      <div className="h-screen col-span-3 flex flex-col items-center justify-center gap-4 transition-opacity animation-custom-fade-in italic">
        <div className="flex gap-1">
          <h1 className="text-5xl font-semibold hover:text-white">Welcome,</h1>
          <h1 className="text-5xl font-semibold hover:text-white">Buggies</h1>
        </div>
        <p className="text-3xl hover:text-white">Unlocking Your Defenses</p>
      </div>
    </div>
  );
};

export default Login;

function LoginAlert() {
  return (
    <Alert
      variant="destructive"
      className="absolute max-w-max right-0 m-4 transition-all animation-custom-fade-in"
    >
      <AlertTitle>Error !</AlertTitle>
      <AlertDescription>
        Invalid email or password. Please try again.
      </AlertDescription>
    </Alert>
  );
}
