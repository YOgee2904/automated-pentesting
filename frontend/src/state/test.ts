import { Reducer } from "redux";

// Interface for test state
interface TestState {
    url: string;
    status: string;
    userId: string;
    nmap: boolean;
    zap: boolean;
    _id: string;
}
// Define initial state
const initialState: TestState[] = [];

// Define action types
enum TestActionTypes {
    ADD_TEST_STATE = "ADD_TEST_STATE",
    UPDATE_TEST_STATE = "UPDATE_TEST_STATE", // New action type
}

// Define action
interface AddTestStateAction {
    type: TestActionTypes.ADD_TEST_STATE;
    payload: TestState;
}

interface UpdateTestStateAction {
    type: TestActionTypes.UPDATE_TEST_STATE;
    payload: {
        _id: string;
        updatedState: Partial<TestState>;
    };
}

type TestAction = AddTestStateAction | UpdateTestStateAction; // Include the new action type

// Define reducer
const testReducer: Reducer<TestState[], TestAction> = (state = initialState, action) => {
    switch (action.type) {
        case TestActionTypes.ADD_TEST_STATE:
            return [...state, action.payload];
        case TestActionTypes.UPDATE_TEST_STATE:
            return state.map((test) => {
                if (test._id === action.payload._id) {
                    return { ...test, ...action.payload.updatedState };
                }
                return test;
            });
        default:
            return state;
    }
};

export { TestActionTypes, testReducer };
