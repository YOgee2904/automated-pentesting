import amqp from "amqplib/callback_api";
import { Server, Socket } from "socket.io";
import nmap from "node-nmap";
import { socketHandle } from "./socket-handle";
import { updateStatus } from "./saveReport";
import { get } from "http";
import { getRandomValues } from "crypto";
import { set } from "mongoose";
import { writeFileSync } from "fs";
const zaproxy = require("zaproxy");

export const scan = (
  url: string,
  callback: (err: any, conn: amqp.Connection) => void
) => {
  amqp.connect(url, (err, conn) => {
    callback(err, conn);
  });
};

export const createChannel = (
  conn: amqp.Connection,
  callback: (err: any, ch: amqp.Channel) => void
) => {
  conn.createChannel((err, ch) => {
    callback(err, ch);
  });
};

// working with the message

export const processMessage = (io: Server) => {
  runWorkerProcess(io);
};

// Run the worker process until the zap status reaches 100 and nmap is completed
const runWorkerProcess = (io: Server) => {
  scan("amqp://localhost", (err, conn) => {
    if (err) {
      return;
    }

    conn.createChannel((err, ch: amqp.Channel) => {
      // Update the type of 'ch' parameter
      if (err) {
        return;
      }

      socketHandle(ch, io);
    });
  });
};

// perform nmamp scan
export const performNmapScan = (url: string, userId: string) => {
  return new Promise((resolve, reject) => {
    console.log("Performing nmap scan");
    const nmapScan = new nmap.NmapScan(url, "-sT");
    nmapScan.on("complete", (data: any) => {
      console.log(data);
      resolve(data);
    });
    nmapScan.on("error", (error: any) => {
      console.log(error);
      reject(error);
    });
  });
};

// perform zap scan

const zapConfig = {
  proxy: {
    host: "localhost",
    port: "8080",
  },
};
export const performZapScan = (url: string) => {
  return new Promise(async (resolve, reject) => {
    const zap = new zaproxy({
      proxy: {
        host: "127.0.0.1",
        port: 8090,
      },
    });
    const scanId = await zap.spider.scan({
      url: `https://${url}`,
    });
    console.log(scanId);
    var scanStatus = {status : 0};
    while (scanStatus.status < 100) {
      scanStatus = await zap.spider.status({ scanId });
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    console.log(scanStatus);
    const res = await zap.spider.results({ scanId });
    console.log(res.results);
    // perform active scan
    const activeScanId = await zap.ascan.scan({
      url: `https://${url}`,
    });
    console.log(activeScanId.scan);
    scanStatus.status = 0;
    while (scanStatus.status < 100) {
      scanStatus = await zap.ascan.status({ scanId: activeScanId.scan});
    }
    console.log(scanStatus.status);
    const activeScanRes = await zap.ascan.alertsIds({ scanid: activeScanId.scan});
    fetch("http://localhost:8090/OTHER/core/other/htmlreport/?")
      .then((res) => {
        return res.text();
      })
      .then((htmlReportBase64) => {
       writeFileSync(`${url}.html`, htmlReportBase64);
       resolve(htmlReportBase64);
        console.log("HTML report written");
      })
      .catch((error) => {
        console.log(error);
      });
  });
};
