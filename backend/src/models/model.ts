import mongoose from "mongoose";
import bcrypt from "bcrypt";

// Define the user schema
const userSchema = new mongoose.Schema({
  uname: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
});

// Define the scan schema
const scanSchema = new mongoose.Schema({
  userId: {
    type: String,
    required: true,
  },
  url: {
    type: String,
    required: true,
  },
  status: {
    type: String,
    required: true,
  },
  nmap: {
    type: Boolean,
    default: false,
  },
  zap: {
    type: Boolean,
    default: false,
  },
  result: {
    type: String,
    default: "",
  },
});

// Hash the password before saving the user
userSchema.pre("save", async function (next) {
  const user = this;

  if (!user.isModified("password")) {
    return next();
  }

  try {
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(user.password, salt);
    user.password = hashedPassword;
    next();
  } catch (error: any) {
    return next(error);
  }
});

// Create the user model
const User = mongoose.model("User", userSchema);
// Create the scan model
const Scan = mongoose.model("Scan", scanSchema);
// Create the result model

export { User, Scan };
